from random import choices
from threading import Timer
from selenium import webdriver
from selenium.webdriver.chrome.service import Service  # –ø–æ–º–æ–≥–∞–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å ChromeDriver
from selenium.webdriver.common.by import By  # –¥–ª—è –≤—ã–±–æ—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
from selenium.webdriver.chrome.options import Options
from webdriver_manager.chrome import ChromeDriverManager
import time
import json
import telebot
import webbrowser
import os
from dotenv import load_dotenv
load_dotenv()
from telebot import types
import pandas as pd
from json import loads, dumps
import random

options = Options()  # –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä
options.add_argument("--headless")  # –∑–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ, —Ç.–µ. –±–µ–∑ –æ–∫–Ω–∞ –±—Ä–∞—É–∑–µ—Ä–∞

# —ç—Ç–∞ —à—Ç—É–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–∫–∞—á–∞—Ç—å –¥—Ä–∞–π–≤–µ—Ä –¥–ª—è —Ö—Ä–æ–º–∞ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä —Å –Ω—É–∂–Ω—ã–º–∏ –º–Ω–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã—à–µ
driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)

url = "https://yandex.ru/company/researches/2021/local-words"
driver.get(url)
time.sleep(5)
blocks = driver.find_elements(By.CLASS_NAME, "word-block")  # –∏—â—É –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å —ç—Ç–∏–º –∫–ª–∞—Å—Å–æ–º

botik = telebot.TeleBot(os.getenv('token'))
@botik.message_handler(commands=['site'])
def site(message):
    webbrowser.open('https://yandex.ru/company/researches/2021/local-words')

words = []
for block in blocks:
    words.append({
        "word": block.find_element(By.CLASS_NAME, "word-block__title").text.strip(),
        "meaning": block.find_element(By.CLASS_NAME, "word-block__description").text.strip(),
        "example": block.find_element(By.CLASS_NAME, "word-block__example").text.strip(),
        "region": block.find_element(By.CLASS_NAME, "word-block__regions").text.strip()
    })

driver.quit()

with open("local_words.json", "w", encoding="utf-8") as f:
    json.dump(words, f, ensure_ascii=False, indent=2)

data = pd.read_json("local_words.json", orient="records")
tojson = data.to_json(orient="records")
parsed = loads(tojson)
lst = []
for line in parsed:
    lst.append(line)

@botik.message_handler(commands=['start'])
def main(message):

    markup = types.InlineKeyboardMarkup()
    com1 = types.InlineKeyboardButton("–ù–∞—á–∞—Ç—å —É–≥–∞–¥—ã–≤–∞—Ç—å", callback_data='startgame')
    com2 = types.InlineKeyboardButton("–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã", callback_data='rules')
    com3 = types.InlineKeyboardButton("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è", callback_data='goodbye')
    com4 = types.InlineKeyboardButton("–°–∞–π—Ç-–∏—Å—Ç–æ—á–Ω–∏–∫", url='https://yandex.ru/company/researches/2021/local-words')
    markup.add(com1, com2, com3, com4)
    botik.send_message(message.chat.id,f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}. –≠—Ç–æ –±–æ—Ç –¥–ª—è –∏–≥—Ä—ã-—É–≥–∞–¥–∞–π–∫–∏ —Ä–µ–≥–∏–æ–Ω–∞–ª–∏–∑–º–æ–≤. '
                                       f'–ò—Å–ø—ã—Ç–∞–π —Å–≤–æ–µ –ª–∏–Ω–≥–≤–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ —á—É—Ç—å–µ –∏ –ø–æ–ø—Ä–æ–±—É–π –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫–æ–µ –∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π –≤–µ—Ä–Ω–æ–µ. '
                                       f'–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å, –Ω–∞–∂–º–∏ <b>–ù–∞—á–∞—Ç—å —É–≥–∞–¥—ã–≤–∞—Ç—å</b>. '
                                       f'–ï—Å–ª–∏ —Ç—ã –∑–¥–µ—Å—å –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑, —Å–Ω–∞—á–∞–ª–∞ –æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏, –Ω–∞–∂–∞–≤ <b>–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã</b>. '
                                       f'–ï—Å–ª–∏ —É —Ç–µ–±—è –Ω–µ—Ç –∂–µ–ª–∞–Ω–∏—è –∏–≥—Ä–∞—Ç—å, –Ω–∞–∂–º–∏ <b>–î–æ —Å–≤–∏–¥–∞–Ω–∏—è</b>. '
                                       f'–ó–∞ –æ—Å–Ω–æ–≤—É –±—ã–ª–∏ –≤–∑—è—Ç—ã —Å–ª–æ–≤–∞ —Å —Å–∞–π—Ç–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –Ø–Ω–¥–µ–∫—Å–∞ (–∫—É–¥–∞ –º–æ–∂–Ω–æ –ø–æ–ø–∞—Å—Ç—å, –Ω–∞–∂–∞–≤ <b>–°–∞–π—Ç-–∏—Å—Ç–æ—á–Ω–∏–∫</b>), '
                                       f'–Ω–æ –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –∑–∞—Ö–æ–¥–∏—Ç—å –Ω–∞ –Ω–µ–≥–æ –¥–æ –∏–≥—Ä—ã, '
                                       f'–ø–æ—Ç–æ–º—É —á—Ç–æ —Ç–æ–≥–¥–∞ –≤ –Ω–µ–π –Ω–µ –±—É–¥–µ—Ç —Å–º—ã—Å–ª–∞.', parse_mode='html', reply_markup=markup)
@botik.callback_query_handler(func=lambda call: True)
def call_black(call):
    if call.data == 'rules':
        markup = types.InlineKeyboardMarkup()
        com1 = types.InlineKeyboardButton("–ù–∞—á–∞—Ç—å —É–≥–∞–¥—ã–≤–∞—Ç—å", callback_data='startgame')
        com3 = types.InlineKeyboardButton("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è", callback_data='goodbye')
        markup.add(com1,com3)
        botik.send_message(call.message.chat.id, "–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã:\n 1. –í –∏–≥—Ä–µ 10 —Ä–∞—É–Ω–¥–æ–≤, –∑–∞ –∫–∞–∂–¥—ã–π –∏–∑ "
                                                 "–∫–æ—Ç–æ—Ä—ã—Ö —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å 1 –±–∞–ª–ª.\n 2. –¢–µ–±–µ —Ä–∞–Ω–¥–æ–º–Ω–æ –≤—ã–ø–∞–¥—É—Ç "
                                                 "—Å–ª–æ–≤–æ-—Ä–µ–≥–∏–æ–Ω–∞–ª–∏–∑–º –∏ 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ ‚Äì –≤–æ–∑–º–æ–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —ç—Ç–æ–≥–æ "
                                                 "—Å–ª–æ–≤–∞.\n 3. –£ —Ç–µ–±—è –±—É–¥–µ—Ç –æ–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ —É–≥–∞–¥–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ª–æ–≤–∞.\n 4. "
                                                 "–í–º–µ—Å—Ç–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∏–º–µ—Ä —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞–ª–∏–∑–º–∞ "
                                                 "–∏ –º–µ—Å—Ç–æ, –≤ –∫–æ—Ç–æ—Ä–æ–º –æ–Ω —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω.", reply_markup=markup)
    elif call.data == 'goodbye':
        botik.send_message(call.message.chat.id, "–ß—É–¥–µ—Å–Ω–æ–≥–æ –¥–Ω—è! –ü—Ä–∏—Ö–æ–¥–∏, –∫–æ–≥–¥–∞ –Ω–∞–¥—É–º–∞–µ—à—å –∏–≥—Ä–∞—Ç—å \U0001F609")

    elif call.data == 'startgame':
        chat_id = call.message.chat.id
        game[chat_id] = {
            'gamepoints': 0,
            'rounds': 0,
            'words': lst.copy()
        }
        new_round(chat_id)

    elif call.data.startswith('var'):
        choice_index = int(call.data[-1]) - 1
        chat_id = call.message.chat.id
        user_data = game.get(chat_id)

        if not user_data or 'current_answer' not in user_data:
            botik.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ –∏–≥—Ä—É —Å–Ω–∞—á–∞–ª–∞, —è –Ω–µ –≤ —Ä–µ—Å—É—Ä—Å–µ.")
            return

        chosen_meaning = user_data['current_options'][choice_index]
        correct_meaning = user_data['current_answer']

        if chosen_meaning == correct_meaning:
            user_data['gamepoints'] += 1
            botik.send_message(chat_id, "üíÖ–ù—É –∫—Ä—É—Ç—ã—à–∫–∞! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —ç—Ç–æ –≤–µ—Ä–Ω–æ :)")
        else:
            botik.send_message(chat_id, f"üòã–ê –≤–æ—Ç –∏ –Ω–µ—Ç! —Ö–∏—Ö–∏. –ù–∞ —Å–∞–º–æ–º –¥–µ–ª–µ: {correct_meaning}")

        # –ü–æ–∫–∞–∑ –ø—Ä–∏–º–µ—Ä–∞ –∏ —Ä–µ–≥–∏–æ–Ω–∞
        botik.send_message(chat_id, f"–ì–æ–≤–æ—Ä—è—Ç —Ç–∞–∫: {user_data['example']}\n–ò—Å–ø–æ–ª—å–∑—É—é—Ç —Ç—É—Ç: {user_data['region']}")
        Timer(5, lambda: new_round(chat_id)).start()


def new_round(chat_id):
    user_data = game[chat_id]
    if user_data['rounds'] >= 10 or len(words) < 4:
        botik.send_message(chat_id, f"–í—Å—ë! –ö–æ–Ω–µ—Ü. –í–æ—Ç —Å–∫–æ–ª—å–∫–æ –æ—á–∫–æ–≤ –º—ã —Ç–µ–±–µ –Ω–∞—Å—á–∏—Ç–∞–ª–∏: {user_data['gamepoints']}/10.")
        return
    choices = []
    user_data['rounds'] += 1
    random_word = random.choice(user_data['words'])
    user_data['words'].remove(random_word)
    cor_word = random_word['word']
    cor_mean = random_word['meaning']
    choices.append(cor_mean)
    cor_ex = random_word['example']
    cor_reg = random_word['region']
    while len(choices) < 4:
        wr_mean = random.choice(user_data['words'])['meaning']
        if wr_mean not in choices:
            choices.append(wr_mean)
    random.shuffle(choices)

    text_block = '\n'.join([f'{i + 1}. {opt}' for i, opt in enumerate(choices)])
    markup = types.InlineKeyboardMarkup(row_width=4)
    buttons = [types.InlineKeyboardButton(str(i + 1), callback_data=f'var{i + 1}') for i in range(4)]
    markup.add(*buttons)
    user_data['current_answer'] = cor_mean
    user_data['current_options'] = choices
    user_data['example'] = cor_ex
    user_data['region'] = cor_reg
    botik.send_message(chat_id, f'–ö–∞–∫ –¥—É–º–∞–µ—à—å, —á—Ç–æ –∑–Ω–∞—á–∏—Ç <b>{cor_word}</b>?\n\n{text_block}', parse_mode='html',
                       reply_markup=markup)


@botik.message_handler(func=lambda message: not message.text.startswith('/'), content_types=['text'])
def unknown_message(message):
    botik.send_message(message.chat.id, "–ù–æ—Ä–º–∞–ª—å–Ω–æ –∂–µ –æ–±—â–∞–ª–∏—Å—å, –Ω—É —á–µ–≥–æ —Ç—ã :(. "
                                        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å –±–æ—Ç–æ–º")
botik.polling(none_stop=True)
